<class>
  <keyword>	class	</keyword>
  <identifier>	Square	</identifier>
  <symbol>	{	</symbol>
  <classVarDec>
    <keyword>	field	</keyword>
    <keyword>	int	</keyword>
    <identifier>	x	</identifier>
    <symbol>	,	</symbol>
    <identifier>	y	</identifier>
    <symbol>	;	</symbol>
  </classVarDec>
  <classVarDec>
    <keyword>	field	</keyword>
    <keyword>	int	</keyword>
    <identifier>	size	</identifier>
    <symbol>	;	</symbol>
  </classVarDec>
  <subroutinDec>
    <keyword>	constructor	</keyword>
    <identifier>	Square	</identifier>
    <identifier>	new	</identifier>
    <symbol>	(	</symbol>
    <parameterList>
      <keyword>	int	</keyword>
      <identifier>	Ax	</identifier>
      <symbol>	,	</symbol>
      <keyword>	int	</keyword>
      <identifier>	Ay	</identifier>
      <symbol>	,	</symbol>
      <keyword>	int	</keyword>
      <identifier>	Asize	</identifier>
    </parameterList>
    <symbol>	)	</symbol>
    <subroutineBody>
      <symbol>	{	</symbol>
      <statements>
        <letStatements>
          <keyword>	let	</keyword>
          <identifier>	x	</identifier>
          <symbol>	=	</symbol>
          <expression>
            <term>
              <identifier>	Ax	</identifier>
            </term>
          </expression>
          <symbol>	;	</symbol>
        </letStatements>
        <letStatements>
          <keyword>	let	</keyword>
          <identifier>	y	</identifier>
          <symbol>	=	</symbol>
          <expression>
            <term>
              <identifier>	Ay	</identifier>
            </term>
          </expression>
          <symbol>	;	</symbol>
        </letStatements>
        <letStatements>
          <keyword>	let	</keyword>
          <identifier>	size	</identifier>
          <symbol>	=	</symbol>
          <expression>
            <term>
              <identifier>	Asize	</identifier>
            </term>
          </expression>
          <symbol>	;	</symbol>
        </letStatements>
        <doStatements>
          <keyword>	do	</keyword>
          <identifier>	draw	</identifier>
          <symbol>	(	</symbol>
          <expressionList>
          </expressionList>
          <symbol>	)	</symbol>
          <symbol>	;	</symbol>
        </doStatements>
        <returnStatements>
          <keyword>	return	</keyword>
          <expression>
            <term>
              <identifier>	x	</identifier>
            </term>
          </expression>
          <symbol>	;	</symbol>
        </returnStatements>
      </statements>
      <symbol>	}	</symbol>
    </subroutineBody>
  </subroutinDec>
  <subroutinDec>
    <keyword>	method	</keyword>
    <keyword>	void	</keyword>
    <identifier>	dispose	</identifier>
    <symbol>	(	</symbol>
    <parameterList>
    </parameterList>
    <symbol>	)	</symbol>
    <subroutineBody>
      <symbol>	{	</symbol>
      <statements>
        <doStatements>
          <keyword>	do	</keyword>
          <identifier>	Memory	</identifier>
          <symbol>	.	</symbol>
          <identifier>	deAlloc	</identifier>
          <symbol>	(	</symbol>
          <expressionList>
            <expression>
              <term>
                <keyword>	this	</keyword>
              </term>
            </expression>
          </expressionList>
          <symbol>	)	</symbol>
          <symbol>	;	</symbol>
        </doStatements>
        <returnStatements>
          <keyword>	return	</keyword>
          <symbol>	;	</symbol>
        </returnStatements>
      </statements>
      <symbol>	}	</symbol>
    </subroutineBody>
  </subroutinDec>
  <subroutinDec>
    <keyword>	method	</keyword>
    <keyword>	void	</keyword>
    <identifier>	draw	</identifier>
    <symbol>	(	</symbol>
    <parameterList>
    </parameterList>
    <symbol>	)	</symbol>
    <subroutineBody>
      <symbol>	{	</symbol>
      <statements>
        <doStatements>
          <keyword>	do	</keyword>
          <identifier>	Screen	</identifier>
          <symbol>	.	</symbol>
          <identifier>	setColor	</identifier>
          <symbol>	(	</symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>	x	</identifier>
              </term>
            </expression>
          </expressionList>
          <symbol>	)	</symbol>
          <symbol>	;	</symbol>
        </doStatements>
        <doStatements>
          <keyword>	do	</keyword>
          <identifier>	Screen	</identifier>
          <symbol>	.	</symbol>
          <identifier>	drawRectangle	</identifier>
          <symbol>	(	</symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>	x	</identifier>
              </term>
            </expression>
            <symbol>	,	</symbol>
            <expression>
              <term>
                <identifier>	y	</identifier>
              </term>
            </expression>
            <symbol>	,	</symbol>
            <expression>
              <term>
                <identifier>	x	</identifier>
              </term>
            </expression>
            <symbol>	,	</symbol>
            <expression>
              <term>
                <identifier>	y	</identifier>
              </term>
            </expression>
          </expressionList>
          <symbol>	)	</symbol>
          <symbol>	;	</symbol>
        </doStatements>
        <returnStatements>
          <keyword>	return	</keyword>
          <symbol>	;	</symbol>
        </returnStatements>
      </statements>
      <symbol>	}	</symbol>
    </subroutineBody>
  </subroutinDec>
  <subroutinDec>
    <keyword>	method	</keyword>
    <keyword>	void	</keyword>
    <identifier>	erase	</identifier>
    <symbol>	(	</symbol>
    <parameterList>
    </parameterList>
    <symbol>	)	</symbol>
    <subroutineBody>
      <symbol>	{	</symbol>
      <statements>
        <doStatements>
          <keyword>	do	</keyword>
          <identifier>	Screen	</identifier>
          <symbol>	.	</symbol>
          <identifier>	setColor	</identifier>
          <symbol>	(	</symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>	x	</identifier>
              </term>
            </expression>
          </expressionList>
          <symbol>	)	</symbol>
          <symbol>	;	</symbol>
        </doStatements>
        <doStatements>
          <keyword>	do	</keyword>
          <identifier>	Screen	</identifier>
          <symbol>	.	</symbol>
          <identifier>	drawRectangle	</identifier>
          <symbol>	(	</symbol>
          <expressionList>
            <expression>
              <term>
                <identifier>	x	</identifier>
              </term>
            </expression>
            <symbol>	,	</symbol>
            <expression>
              <term>
                <identifier>	y	</identifier>
              </term>
            </expression>
            <symbol>	,	</symbol>
            <expression>
              <term>
                <identifier>	x	</identifier>
              </term>
            </expression>
            <symbol>	,	</symbol>
            <expression>
              <term>
                <identifier>	y	</identifier>
              </term>
            </expression>
          </expressionList>
          <symbol>	)	</symbol>
          <symbol>	;	</symbol>
        </doStatements>
        <returnStatements>
          <keyword>	return	</keyword>
          <symbol>	;	</symbol>
        </returnStatements>
      </statements>
      <symbol>	}	</symbol>
    </subroutineBody>
  </subroutinDec>
  <subroutinDec>
    <keyword>	method	</keyword>
    <keyword>	void	</keyword>
    <identifier>	incSize	</identifier>
    <symbol>	(	</symbol>
    <parameterList>
    </parameterList>
    <symbol>	)	</symbol>
    <subroutineBody>
      <symbol>	{	</symbol>
      <statements>
        <ifStatements>
          <keyword>	if	</keyword>
