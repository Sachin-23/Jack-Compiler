<class>
  <keyword> class </keyword>
  <identifier> Square </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier typeOf='int' indexOf='0' kindOf='FIELD'>x</identifier>
    <symbol> , </symbol>
    <identifier typeOf='int' indexOf='1' kindOf='FIELD'>y</identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier typeOf='int' indexOf='2' kindOf='FIELD'>size</identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Square </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier typeOf='int' indexOf='0' kindOf='ARG'>Ax</identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier typeOf='int' indexOf='1' kindOf='ARG'>Ay</identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier typeOf='int' indexOf='2' kindOf='ARG'>Asize</identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier index='0' segmentType='THIS'>x</identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier index='0' segmentType='ARGUMENT'>int</identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier index='1' segmentType='THIS'>y</identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier index='1' segmentType='ARGUMENT'>int</identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier index='2' segmentType='THIS'>size</identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier index='2' segmentType='ARGUMENT'>int</identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier>Square.draw</identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <symbol> . </symbol>
          <identifier>Memory.deAlloc</identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <symbol> . </symbol>
          <identifier>Screen.setColor</identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <symbol> . </symbol>
          <identifier>Screen.drawRectangle</identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier index='0' segmentType='THIS'>int</identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier index='1' segmentType='THIS'>int</identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier index='0' segmentType='THIS'>int</identifier>
              </term>
              <term>
                <identifier index='2' segmentType='THIS'>int</identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier index='1' segmentType='THIS'>int</identifier>
              </term>
              <term>
                <identifier index='2' segmentType='THIS'>int</identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> erase </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <symbol> . </symbol>
          <identifier>Screen.setColor</identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <symbol> . </symbol>
          <identifier>Screen.drawRectangle</identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier index='0' segmentType='THIS'>int</identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier index='1' segmentType='THIS'>int</identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier index='0' segmentType='THIS'>int</identifier>
              </term>
              <term>
                <identifier index='2' segmentType='THIS'>int</identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier index='1' segmentType='THIS'>int</identifier>
              </term>
              <term>
                <identifier index='2' segmentType='THIS'>int</identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> incSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier index='1' segmentType='THIS'>int</identifier>
                    </term>
                    <term>
                      <identifier index='2' segmentType='THIS'>int</identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <term>
                  <integerConstant> 254 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier index='0' segmentType='THIS'>int</identifier>
                    </term>
                    <term>
                      <identifier index='2' segmentType='THIS'>int</identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <term>
                  <integerConstant> 510 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>Square.erase</identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier index='2' segmentType='THIS'>size</identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier index='2' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier>Square.draw</identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> decSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier index='2' segmentType='THIS'>int</identifier>
            </term>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier>Square.erase</identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier index='2' segmentType='THIS'>size</identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier index='2' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier>Square.draw</identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveUp </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier index='1' segmentType='THIS'>int</identifier>
            </term>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier index='1' segmentType='THIS'>int</identifier>
                      </term>
                      <term>
                        <identifier index='2' segmentType='THIS'>int</identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier index='1' segmentType='THIS'>y</identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier index='1' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveDown </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier index='1' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <identifier index='2' segmentType='THIS'>int</identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <term>
              <integerConstant> 254 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier index='1' segmentType='THIS'>y</identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier index='1' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier index='1' segmentType='THIS'>int</identifier>
                      </term>
                      <term>
                        <identifier index='2' segmentType='THIS'>int</identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier index='0' segmentType='THIS'>int</identifier>
            </term>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier index='0' segmentType='THIS'>int</identifier>
                      </term>
                      <term>
                        <identifier index='2' segmentType='THIS'>int</identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier index='0' segmentType='THIS'>x</identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier index='0' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier index='0' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <identifier index='2' segmentType='THIS'>int</identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <term>
              <integerConstant> 510 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier index='0' segmentType='THIS'>x</identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier index='0' segmentType='THIS'>int</identifier>
                </term>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.setColor</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <symbol> . </symbol>
              <identifier>Screen.drawRectangle</identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier index='0' segmentType='THIS'>int</identifier>
                      </term>
                      <term>
                        <identifier index='2' segmentType='THIS'>int</identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='0' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier index='1' segmentType='THIS'>int</identifier>
                  </term>
                  <term>
                    <identifier index='2' segmentType='THIS'>int</identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
